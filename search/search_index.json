{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"","tags":["tag1","tag2"]},{"location":"#i-am-jack-francis-a-robotics-engineer-at-asu-polytechnic","title":"I am Jack Francis, a Robotics Engineer at ASU Polytechnic","text":"<p>Here I have showcased projects I have worked on academically and personally, exhibiting a wide range of skills that I hope to apply in my career.</p>","tags":["tag1","tag2"]},{"location":"1synthbox9000/","title":"Synthbox9000","text":"<p> Updated 10/23/25</p> <p>The Synthbox9000 is a digital synthesizer that interprets MIDI data and outputs audio based upon it. When the processor receives the MIDI data via uart, it parses it into an amplification as well as interpolation algorithm for volume and pitch shifting respectively. After that it reads individual note data and sums it all into a singular buffer, which is then read out to out of the DAC and into a low pass filter to refine the audio data. The audio signals then reada 3.5mm jack that can plugged into with headphones or a speaker.</p> <p>Here are the PCB layers and schematic diagram detailing the wirings between each component of the system.</p>"},{"location":"1synthbox9000/#schematic","title":"Schematic","text":""},{"location":"1synthbox9000/#top-layer","title":"Top Layer","text":""},{"location":"1synthbox9000/#bottom-layer","title":"Bottom Layer","text":"<p>So far, the system is able to output polyphonic audio but is grainy and scratchy when it comes to non-octave values. We expect this is due to either an inefficient algorithm or lack of memory located on the ESP32 flash. We are looking into switching to wavetable synthesis which utilizes shorter samples (saves memory) and an ADSR algorithm for dynamics.</p>"},{"location":"2multiboard/","title":"Multi-Board Embedded System Game","text":"<p>This is an academic project where I worked with a team mate to create a interactive game where a user changes the state of an actuator based upon a series of button inputs. The user is given a challenge to balance an actuator through giving it the correct position, based upon two push buttons to control forward and reverse motion. The display would graphically tell the user where to position the actuator which would score the user a point. After a certain amount of points, the actuator's position resets and the the display showcases a victory screen. The two boards would communicate to each other using a daisy chain that would provide RX and TX as well and ground and power to both subsystems. Each member created their board with a budget of 50 dollars and individual code that would execute a function and communicate with RX and TX to the other subsystems.</p> <p>Originally this project was designed to be a pitch recreation game, where the display showed a desired frequency and an actual frequency represented by a horizontal line (desired) and a bar going up and down (actual). The user would sing the pitch into the microphone and when reached for a certain amount of time, would activate the actuator to move forward a little and reset the desired frequency position. After the actuator moves far enough, it would reset its position and display the victory screen on the display. This was not achieved due one team member being banned from campus, and the other team member not being able to contribute, depriving us of multiple subsytems necessary to finish this concept. Despite this, my and my other team mate were able to create a functional game using our individual assigned subsystems within the project deadline.</p> <p>Here are the final diagrams for our project:</p>"},{"location":"2multiboard/#my-schematic","title":"My Schematic","text":""},{"location":"2multiboard/#my-pcb-top-layer","title":"My PCB Top Layer","text":""},{"location":"2multiboard/#my-pcb-bottom-layer","title":"My PCB Bottom Layer","text":""},{"location":"2multiboard/#block-diagram","title":"Block Diagram","text":""},{"location":"3homingcamera/","title":"Homing Camera","text":"","tags":["tag1","tag2"]},{"location":"3homingcamera/#diagram","title":"Diagram","text":"<p>This was a class project in which I was assigned to create a system that was able to track and follow objects. I put together simple hardware such as a DC stepper motor, a basic USB camera, and a fastener in order to attach the camera to the motor's peg. The camera's graphical information was interpreted by a python script that would communicate the distance of a red object from the middle of the screen. It detected red objects by determining where a significant amount of red particles were detected together and tracked it as an object. This made it so individual red particles were ignored. I also used a library that would turn the particles into a larger mesh so that there wasn't noise within the camera's recording of the red object that would stop it from detecting. After this it would use a PID algorithm to compute the velocities necessary in order to reach the red object without jittering or oscillation. This python script then communicated those velocity values to a PSoC microcontroller via UART in order to change the velocity of the stepper motor as the red object gets either further or closer from the middle of the camera lens. When no red object is detected, the camera enters patrol mode where it moves its lens back and forth until a red object is detected.</p>","tags":["tag1","tag2"]},{"location":"4scaramachinevision/","title":"Machine Vision SCARA","text":"<p>This is a class project where I was assigned to create a manipulator that would pick up an object and place it into a bin. From servo motors, I built a SCARA manipulator with an electromagnet that would pick up a nut and put it in a bin. The placement of the nut was recorded by a USB camera hovering above the area where the SCARA would reach, and it would convert pixels of the camera recording to physical units in order to find the placement of the nut. A matlab script used inverse kinematics to compute the servo angles which would then be sent to the PSoC microcontroller via UART in order to change the position of the servos, as well as drive the electromagnet to pick up and drop off the nut into an offscreen bin.</p>"},{"location":"4scaramachinevision/#diagram","title":"Diagram","text":""},{"location":"5resources/","title":"Resources","text":""},{"location":"5resources/#project-code","title":"Project Code","text":"<p>EGR314Code.zip</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#mathjax","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\n  loader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\n  const svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\n  console.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}